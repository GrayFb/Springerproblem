# Datei:    springer.py
# Version:  1.1
# Datum:    27.02.2018
# Autor:    Jules


def bedroht(n,derSpringer, besetzteFelder):
    #derSpringer: (zeile,spalte)
    #besetzteFelder:[(zeile,spalte),(zeile,spalte)...]
    
    if besetzteFelder==[]:
        return 0
    
    for feld in besetzteFelder:
        if derSpringer==feld:
            return 1

    for feld in besetzteFelder:
        if derSpringer[0] < 0 or derSpringer[0] > n :
            return 1
        if derSpringer [1] < 0 or derSpringer [1] > n :
            return 1

    return 0


def loese(n, eineLoesung, aktPos):
    
    while len(eineLoesung)!= n*n:
        futurePos=(aktPos[0]-2,aktPos[1]+1)

        if bedroht (n, futurePos,eineLoesung) is 1:
            futurePos=(aktPos[0]-1,aktPos[1]+2)
            
            if bedroht (n, futurePos, eineLoesung) is 1:
                futurePos=(aktPos[0]+1,aktPos[1]+2)

                if bedroht (n, futurePos, eineLoesung) is 1:
                    futurePos=(aktPos[0]+2,aktPos[1]+1)

                    if bedroht (n, futurePos, eineLoesung) is 1:
                        futurePos=(aktPos[0]+2,aktPos[1]-1)

                        if bedroht (n, futurePos, eineLoesung) is 1:
                            futurePos=(aktPos[0]+1,aktPos[1]-2)

                            if bedroht (n, futurePos, eineLoesung) is 1:
                                futurePos=(aktPos[0]-1,aktPos[1]-2)

                                if bedroht (n, futurePos, eineLoesung) is 1:
                                    futurePos=(aktPos[0]-2,aktPos[1]-1)

                                    if bedroht (n, futurePos, eineLoesung) is 1:
                                        loese(n, 
                                    else:
                                        eineLoesung.append(futurePos)
                                        loese(n, eineLoesung, futurePos)
                                else:
                                    eineLoesung.append(futurePos)
                                    loese(n, eineLoesung, futurePos)
                            else:
                                eineLoesung.append(futurePos)
                                loese(n, eineLoesung, futurePos)
                        else:
                            eineLoesung.append(futurePos)
                            loese(n, eineLoesung, futurePos)
                    else:
                        eineLoesung.append(futurePos)
                        loese(n, eineLoesung, futurePos)
                else:
                    eineLoesung.append(futurePos)
                    loese(n, eineLoesung, futurePos)
            else:
                eineLoesung.append(futurePos)
                loese(n, eineLoesung, futurePos)
        else:
            eineLoesung.append(futurePos)
            loese(n, eineLoesung, futurePos)
               
        
    if len(eineLoesung) is n*n:
        print eineLoesung
    else:
        loese(n, eineLoesung, aktPos)
        


def nSpringer(n, ersterSpringer=(0,0)):
    lsg=[ersterSpringer]
    loese(n,lsg,(0,0))


nSpringer(5)    
  
